AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Template de proceso clean para tiresopt-baseline

Parameters:

  BVersion:
    Description: Boto3 Version
    Type: String
    Default: 1

  PVersion:
    Description: Pandas Version
    Type: String
    Default: 1

  WVersion:
    Description: Wrangler Version
    Type: String
    Default: 1

  CleaningVersion:
    Description: Cleaning Version
    Type: String
    Default: 1

Globals:
  Function:
    Environment:
      Variables:
        rawbucket: !Sub '{{resolve:ssm:RawBucket:1}}'
        inputbucket: !Sub '{{resolve:ssm:InputBucket:1}}'
        outputbucket: !Sub '{{resolve:ssm:OutputBucket:1}}'
        dynamodbads: !Sub '{{resolve:ssm:DynamoDBADS:1}}'
        dynamodbanomalias: !Sub '{{resolve:ssm:DBAnomalias:1}}'
        statusdatasource: !Sub '{{resolve:ssm:StatusDataSource:1}}'
        roleusers: !Sub '{{resolve:ssm:tiresoptUsers:1}}'
        # funcionpredict: !Sub '{{resolve:ssm:CodesPredict:1}}'
        # stage: !Sub ${Stage}
        # client: !Sub '{{resolve:ssm:mine:1}}'
        # flota: !Sub '{{resolve:ssm:flotacaex:1}}'
        # aljibe: !Sub '{{resolve:ssm:flotaaljibes:1}}'
        # fuentes: !Sub '{{resolve:ssm:fuentes_disponibles:1}}'
    # Tags:
    #   StackName: !Sub ${AWS::StackName}

Resources:
  # IAM Role -
  LambdaRoleClean:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AWS::StackName}-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: WriteCloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: ReadOnInputBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
        - PolicyName: allowLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - lambda:*
              Resource: "*"

        # Si no funciona sacar de ac√°
        # - PolicyName: ReadOnInputBucket
        #   PolicyDocument:
        #     Version: '2012-10-17'
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - 's3:GetObject'
        #           - 's3:PutObject'
        #         Resource:
        #           - !Sub arn:aws:s3:::{{resolve:ssm:RawBucket:1}}/*
        #           - !Sub arn:aws:s3:::{{resolve:ssm:InputBucket:1}}/*
        #           - !Sub arn:aws:s3:::{{resolve:ssm:OutputBucket:1}}/*

# Lambda Function -
  CleanProcessingMaintenance:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-maintenance
      Events:
        TopicEvent:
          Type: SNS
          Properties:
            Topic: !Sub '{{resolve:ssm:CleanTopicMaintenance:1}}'
      MemorySize: 2048
      Timeout: 300
      Runtime: python3.7
      CodeUri: maintenance/
      Handler: main_clean_maintenance.handler
      Role: !GetAtt LambdaRoleClean.Arn
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:awswrangler:${WVersion}'

  CleanProcessingGPS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-gps
      Events:
        TopicEvent:
          Type: SNS
          Properties:
            Topic: !Sub '{{resolve:ssm:CleanTopicgps:1}}'
      MemorySize: 2048
      Timeout: 300
      CodeUri: gps/
      Handler: main_clean_gps.handler
      Runtime: python3.7
      Role: !GetAtt LambdaRoleClean.Arn
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:awswrangler:${WVersion}'

  CleanProcessingMems:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-mems
      Events:
        TopicEvent:
          Type: SNS
          Properties:
            Topic: !Sub '{{resolve:ssm:CleanTopicMems:1}}'
      MemorySize: 1024
      Timeout: 300
      CodeUri: mems/
      Handler: main_clean_mems.handler
      Runtime: python3.7
      Role: !GetAtt LambdaRoleClean.Arn
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:awswrangler:${WVersion}'

  CleanProcessingLoads:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-loads
      Events:
        TopicEvent:
          Type: SNS
          Properties:
            Topic: !Sub '{{resolve:ssm:CleanTopicLoads:1}}'
      MemorySize: 512
      Timeout: 300
      CodeUri: loads/
      Handler: main_clean_loads.handler
      Runtime: python3.7
      Role: !GetAtt LambdaRoleClean.Arn
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:awswrangler:${WVersion}'

Outputs:

  CleanMaintenance:
    Description: "Limpieza de los datos de combustible dispatch"
    Value: !Ref CleanProcessingMaintenance
    Export:
        Name: !Sub "${AWS::StackName}-CleanMaintenance"

  CleanGPS:
    Description: "Limpieza de los datos de GPS"
    Value: !Ref CleanProcessingGPS
    Export:
        Name: !Sub "${AWS::StackName}-CleanGPS"

  CleanLoads:
    Description: "Limpieza de los datos de cargas de mineral"
    Value: !Ref CleanProcessingLoads
    Export:
        Name: !Sub "${AWS::StackName}-CleanLoads"

  CleanMems:
    Description: "Limpieza de los datos de mems"
    Value: !Ref CleanProcessingMems
    Export:
        Name: !Sub "${AWS::StackName}-CleanMems"
